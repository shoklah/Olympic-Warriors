version: "3"

services:
  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    command: gunicorn olympic_warriors.wsgi:application --bind 0.0.0.0:3003
    ports:
      - "3003:3003"
    volumes:
      - ./server/:/server
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    working_dir: /home/app/web/
    environment:
      - ENV=prod
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    restart: always
    user: postgres
    environment:
      - POSTGRES_DB=
      - POSTGRES_USER=
      - POSTGRES_PASSWORD=
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U POSTGRES_USER -d POSTGRES_DB"]
      interval: 10s
      timeout: 60s
      retries: 20
      start_period: 20s
    volumes:
      - data:/var/lib/postgresql/data

  server-stage:
    build:
      context: /opt/OW_stage/Olympic-Warriors/server
      dockerfile: Dockerfile.stage
    command: gunicorn olympic_warriors.wsgi:application --bind 0.0.0.0:3004
    ports:
      - "3004:3004"
    volumes:
      - /opt/OW_stage/Olympic-Warriors/server/:/home/stage/web/
      - static_volume_stage:/home/stage/web/staticfiles
      - media_volume_stage:/home/stage/web/mediafiles
    working_dir: /home/stage/web/
    environment:
      - ENV=prod
    depends_on:
      db-stage:
        condition: service_healthy

  db-stage:
    image: postgres:16-alpine
    restart: always
    user: postgres
    environment:
      - POSTGRES_DB=
      - POSTGRES_USER=
      - POSTGRES_PASSWORD=
      - PGPORT=5433
    ports:
      - "5433:5433"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U POSTGRES_USER -d POSTGRES_DB"]
      interval: 10s
      timeout: 60s
      retries: 20
      start_period: 20s
    volumes:
      - data_stage:/var/lib/postgresql/data

  nginx:
    image: jonasal/nginx-certbot:5.2.1-alpine
    restart: unless-stopped
    environment:
      - CERTBOT_EMAIL=
    ports:
      - "80:80"
      - "443:443"
    volumes:                                          # Lets Encrypt certs storage can be either a
      - nginx_secrets:/etc/letsencrypt                # Docker managed volume (see list at the bottom)
      - ./nginx/user_conf.d:/etc/nginx/user_conf.d    # or a host mount with a relative or full path.
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
      - static_volume_stage:/home/stage/web/staticfiles
      - media_volume_stage:/home/stage/web/mediafiles
    depends_on:
      - server
      - server-stage


volumes:
  data:
  static_volume:
  media_volume:
  nginx_secrets:
  data_stage:
  static_volume_stage:
  media_volume_stage:
